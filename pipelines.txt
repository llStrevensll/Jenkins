pipeline {
    agent any

    stages {
        stage('Build') {
            steps{
                echo 'Building..'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }
}

pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                sh 'echo "My first pipeline"'
                sh '''
                    echo "By the way, I can do more stuff in here"
                    ls -lah
                '''
            }
        }
    }
}

//bat -> sh


pipeline {
    agent any
    stages {
        stage('Timeout') {
            steps {
                retry(3) {
                    sh 'I am not going to work'
                }
            }
        }
    }
}

pipeline {
    agent any
    stages {
        stage('Timeout') {
            steps {
                retry(3) {
                    sh 'echo hello'
                }

                timeout(time: 3, unit: 'SECONDS') {
                    sh 'sleep 5'
                }
            }
        }
    }
}

pipeline {
    agent any

    environment {
        NAME = 'Angel'
        LASTNAME = 'Rodriguez'
    }

    stages {
        stage('Build') {
            steps {
                sh 'echo $NAME $LASTNAME'
            }
        }
    }
}

pipeline {
    agent any

    environment {
        secret = credentials('SECRET_TEXT')
    }

    stages {
        stage('Example stage 1') {
            steps {
                sh 'echo $secret'
            }
        }
    }
}

pipeline {
    agent any

    stages {
        stage('Test') {
            steps {
                sh 'echo "Fail!"; exit 1'
            }
        }
    }
    post {
        always{
            echo 'I will always get executed'
        }
        success {
            echo 'I will only get executed if this success'
        }
        failure {
            echo 'I will only get executed if this fails'
        }
        unstable {
            echo 'I will only get executed if this is unstable'
        }
    }
}
// sh 'echo I am fine'

============
pipeline {
    agent any
    stages {
        stage('SCM') {
            steps {
                //git 'https://github.com/llStrevensll/ProjectTestDevOps1',
                //git branch: 'desarrollo'
                git branch: 'desarrollo', credentialsId: '3cc0e838-71f9-4069-85ac-bb4684cc580b', url: "git@github.com:llStrevensll/ProjectTestDevOps1.git"
                
            }
        }
        stage('Build') {
            steps {
                echo 'SonarQube========================'
                script {
                    def scannerHome = tool 'SonarScannerJenkins-4.4.0';
                    withSonarQubeEnv("Sonar8.4.1") {
                        sh 'mvn clean package sonar:sonar'
                        //bat 'C:/sonar-scanner-4.4.0.2170-windows/bin/sonar-scanner.bat -X'
                        //bat 'C:/Sonar/sonar-scanner-4.4.0.2170-windows/bin/sonar-scanner.bat -X'
                    }
                }
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }
}